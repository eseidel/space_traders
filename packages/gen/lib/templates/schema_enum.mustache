{{#imports}}
import '{{{.}}}';
{{/imports}}

enum {{ typeName }} {
    {{#enumValues}}
    {{ enumValueName }}._('{{ enumValue }}'),
    {{/enumValues}}
    ;

    const {{typeName}}._(this.value);

    factory {{ typeName }}.fromJson(String json) {
        return {{ typeName }}.values.firstWhere(
            (value) => value.value == json,
            orElse: () =>
                throw Exception('Unknown {{ typeName }} value: $json')
        );
    }

    /// Convenience to create a nullable type from a nullable json object.
    /// Useful when parsing optional fields.
    static {{ nullableTypeName }} maybeFromJson(String? json) {
        if (json == null) {
            return null;
        }
        return {{ typeName }}.fromJson(json);
    }

    final String value;

    String toJson() => value;
}
