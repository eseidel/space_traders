{{#imports}}
import '{{{.}}}';
{{/imports}}

class {{ typeName }} {
    {{ typeName }}(
        {{#hasProperties}}
        { {{#properties}}{{#isRequired}}required{{/isRequired}} this.{{{ name }}}{{#hasDefaultValue}} = {{{ defaultValue }}}{{/hasDefaultValue}},{{/properties}}
        {{#hasAdditionalProperties}}required this.{{additionalPropertiesName}},{{/hasAdditionalProperties}} }
        {{/hasProperties}}
    );

    factory {{ typeName }}.fromJson({{{fromJsonJsonType}}}
    {{#castFromJsonArg}}
        jsonArg) {
    final json = jsonArg as Map<String, dynamic>;
    {{/castFromJsonArg}}
    {{^castFromJsonArg}}
        json) {
    {{/castFromJsonArg}}
        return {{ typeName }}(
            {{#properties}}
            {{ name }}: {{{ fromJson }}},
            {{/properties}}
            {{#hasAdditionalProperties}}
            {{additionalPropertiesName}}: json.map((key, value) => MapEntry(key, {{{ valueFromJson }}})),
            {{/hasAdditionalProperties}}
        );
    }

    /// Convenience to create a nullable type from a nullable json object.
    /// Useful when parsing optional fields.
    static {{ nullableTypeName }} maybeFromJson(Map<String, dynamic>? json) {
        if (json == null) {
            return null;
        }
        return {{ typeName }}.fromJson(json);
    }

    {{#properties}}
    {{^mutableModels}}final{{/mutableModels}} {{{ type }}} {{ name }};
    {{/properties}}

    {{#hasAdditionalProperties}}
    final Map<String, {{{ valueSchema }}}> {{additionalPropertiesName}};

    {{{ valueSchema }}}? operator [](String key) => {{additionalPropertiesName}}[key];
    {{/hasAdditionalProperties}}

    Map<String, dynamic> toJson() {
        return {
            {{#properties}}
            '{{ name }}': {{{ toJson }}},
            {{/properties}}
            {{#hasAdditionalProperties}}
            ...{{additionalPropertiesName}}.map((key, value) => MapEntry(key, {{{ valueToJson }}})),
            {{/hasAdditionalProperties}}
        };
    }
}
