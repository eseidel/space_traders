enum ShipModuleSymbol {
  MINERAL_PROCESSOR_I('MODULE_MINERAL_PROCESSOR_I'),
  GAS_PROCESSOR_I('MODULE_GAS_PROCESSOR_I'),
  CARGO_HOLD_I('MODULE_CARGO_HOLD_I'),
  CARGO_HOLD_II('MODULE_CARGO_HOLD_II'),
  CARGO_HOLD_III('MODULE_CARGO_HOLD_III'),
  CREW_QUARTERS_I('MODULE_CREW_QUARTERS_I'),
  ENVOY_QUARTERS_I('MODULE_ENVOY_QUARTERS_I'),
  PASSENGER_CABIN_I('MODULE_PASSENGER_CABIN_I'),
  MICRO_REFINERY_I('MODULE_MICRO_REFINERY_I'),
  ORE_REFINERY_I('MODULE_ORE_REFINERY_I'),
  FUEL_REFINERY_I('MODULE_FUEL_REFINERY_I'),
  SCIENCE_LAB_I('MODULE_SCIENCE_LAB_I'),
  JUMP_DRIVE_I('MODULE_JUMP_DRIVE_I'),
  JUMP_DRIVE_II('MODULE_JUMP_DRIVE_II'),
  JUMP_DRIVE_III('MODULE_JUMP_DRIVE_III'),
  WARP_DRIVE_I('MODULE_WARP_DRIVE_I'),
  WARP_DRIVE_II('MODULE_WARP_DRIVE_II'),
  WARP_DRIVE_III('MODULE_WARP_DRIVE_III'),
  SHIELD_GENERATOR_I('MODULE_SHIELD_GENERATOR_I'),
  SHIELD_GENERATOR_II('MODULE_SHIELD_GENERATOR_II');

  const ShipModuleSymbol(this.value);

  factory ShipModuleSymbol.fromJson(String json) {
    return ShipModuleSymbol.values.firstWhere(
      (value) => value.value == json,
      orElse: () => throw Exception('Unknown ShipModuleSymbol value: $json'),
    );
  }

  final String value;

  String toJson() => value;
}
