enum TradeSymbol {
  preciousStones._('PRECIOUS_STONES'),
  quartzSand._('QUARTZ_SAND'),
  siliconCrystals._('SILICON_CRYSTALS'),
  ammoniaIce._('AMMONIA_ICE'),
  liquidHydrogen._('LIQUID_HYDROGEN'),
  liquidNitrogen._('LIQUID_NITROGEN'),
  iceWater._('ICE_WATER'),
  exoticMatter._('EXOTIC_MATTER'),
  advancedCircuitry._('ADVANCED_CIRCUITRY'),
  gravitonEmitters._('GRAVITON_EMITTERS'),
  iron._('IRON'),
  ironOre._('IRON_ORE'),
  copper._('COPPER'),
  copperOre._('COPPER_ORE'),
  aluminum._('ALUMINUM'),
  aluminumOre._('ALUMINUM_ORE'),
  silver._('SILVER'),
  silverOre._('SILVER_ORE'),
  gold._('GOLD'),
  goldOre._('GOLD_ORE'),
  platinum._('PLATINUM'),
  platinumOre._('PLATINUM_ORE'),
  diamonds._('DIAMONDS'),
  uranite._('URANITE'),
  uraniteOre._('URANITE_ORE'),
  meritium._('MERITIUM'),
  meritiumOre._('MERITIUM_ORE'),
  hydrocarbon._('HYDROCARBON'),
  antimatter._('ANTIMATTER'),
  fabMats._('FAB_MATS'),
  fertilizers._('FERTILIZERS'),
  fabrics._('FABRICS'),
  food._('FOOD'),
  jewelry._('JEWELRY'),
  machinery._('MACHINERY'),
  firearms._('FIREARMS'),
  assaultRifles._('ASSAULT_RIFLES'),
  militaryEquipment._('MILITARY_EQUIPMENT'),
  explosives._('EXPLOSIVES'),
  labInstruments._('LAB_INSTRUMENTS'),
  ammunition._('AMMUNITION'),
  electronics._('ELECTRONICS'),
  shipPlating._('SHIP_PLATING'),
  shipParts._('SHIP_PARTS'),
  equipment._('EQUIPMENT'),
  fuel._('FUEL'),
  medicine._('MEDICINE'),
  drugs._('DRUGS'),
  clothing._('CLOTHING'),
  microprocessors._('MICROPROCESSORS'),
  plastics._('PLASTICS'),
  polynucleotides._('POLYNUCLEOTIDES'),
  biocomposites._('BIOCOMPOSITES'),
  quantumStabilizers._('QUANTUM_STABILIZERS'),
  nanobots._('NANOBOTS'),
  aiMainframes._('AI_MAINFRAMES'),
  quantumDrives._('QUANTUM_DRIVES'),
  roboticDrones._('ROBOTIC_DRONES'),
  cyberImplants._('CYBER_IMPLANTS'),
  geneTherapeutics._('GENE_THERAPEUTICS'),
  neuralChips._('NEURAL_CHIPS'),
  moodRegulators._('MOOD_REGULATORS'),
  viralAgents._('VIRAL_AGENTS'),
  microFusionGenerators._('MICRO_FUSION_GENERATORS'),
  supergrains._('SUPERGRAINS'),
  laserRifles._('LASER_RIFLES'),
  holographics._('HOLOGRAPHICS'),
  shipSalvage._('SHIP_SALVAGE'),
  relicTech._('RELIC_TECH'),
  novelLifeforms._('NOVEL_LIFEFORMS'),
  botanicalSpecimens._('BOTANICAL_SPECIMENS'),
  culturalArtifacts._('CULTURAL_ARTIFACTS'),
  frameProbe._('FRAME_PROBE'),
  frameDrone._('FRAME_DRONE'),
  frameInterceptor._('FRAME_INTERCEPTOR'),
  frameRacer._('FRAME_RACER'),
  frameFighter._('FRAME_FIGHTER'),
  frameFrigate._('FRAME_FRIGATE'),
  frameShuttle._('FRAME_SHUTTLE'),
  frameExplorer._('FRAME_EXPLORER'),
  frameMiner._('FRAME_MINER'),
  frameLightFreighter._('FRAME_LIGHT_FREIGHTER'),
  frameHeavyFreighter._('FRAME_HEAVY_FREIGHTER'),
  frameTransport._('FRAME_TRANSPORT'),
  frameDestroyer._('FRAME_DESTROYER'),
  frameCruiser._('FRAME_CRUISER'),
  frameCarrier._('FRAME_CARRIER'),
  frameBulkFreighter._('FRAME_BULK_FREIGHTER'),
  reactorSolarI._('REACTOR_SOLAR_I'),
  reactorFusionI._('REACTOR_FUSION_I'),
  reactorFissionI._('REACTOR_FISSION_I'),
  reactorChemicalI._('REACTOR_CHEMICAL_I'),
  reactorAntimatterI._('REACTOR_ANTIMATTER_I'),
  engineImpulseDriveI._('ENGINE_IMPULSE_DRIVE_I'),
  engineIonDriveI._('ENGINE_ION_DRIVE_I'),
  engineIonDriveIi._('ENGINE_ION_DRIVE_II'),
  engineHyperDriveI._('ENGINE_HYPER_DRIVE_I'),
  moduleMineralProcessorI._('MODULE_MINERAL_PROCESSOR_I'),
  moduleGasProcessorI._('MODULE_GAS_PROCESSOR_I'),
  moduleCargoHoldI._('MODULE_CARGO_HOLD_I'),
  moduleCargoHoldIi._('MODULE_CARGO_HOLD_II'),
  moduleCargoHoldIii._('MODULE_CARGO_HOLD_III'),
  moduleCrewQuartersI._('MODULE_CREW_QUARTERS_I'),
  moduleEnvoyQuartersI._('MODULE_ENVOY_QUARTERS_I'),
  modulePassengerCabinI._('MODULE_PASSENGER_CABIN_I'),
  moduleMicroRefineryI._('MODULE_MICRO_REFINERY_I'),
  moduleScienceLabI._('MODULE_SCIENCE_LAB_I'),
  moduleJumpDriveI._('MODULE_JUMP_DRIVE_I'),
  moduleJumpDriveIi._('MODULE_JUMP_DRIVE_II'),
  moduleJumpDriveIii._('MODULE_JUMP_DRIVE_III'),
  moduleWarpDriveI._('MODULE_WARP_DRIVE_I'),
  moduleWarpDriveIi._('MODULE_WARP_DRIVE_II'),
  moduleWarpDriveIii._('MODULE_WARP_DRIVE_III'),
  moduleShieldGeneratorI._('MODULE_SHIELD_GENERATOR_I'),
  moduleShieldGeneratorIi._('MODULE_SHIELD_GENERATOR_II'),
  moduleOreRefineryI._('MODULE_ORE_REFINERY_I'),
  moduleFuelRefineryI._('MODULE_FUEL_REFINERY_I'),
  mountGasSiphonI._('MOUNT_GAS_SIPHON_I'),
  mountGasSiphonIi._('MOUNT_GAS_SIPHON_II'),
  mountGasSiphonIii._('MOUNT_GAS_SIPHON_III'),
  mountSurveyorI._('MOUNT_SURVEYOR_I'),
  mountSurveyorIi._('MOUNT_SURVEYOR_II'),
  mountSurveyorIii._('MOUNT_SURVEYOR_III'),
  mountSensorArrayI._('MOUNT_SENSOR_ARRAY_I'),
  mountSensorArrayIi._('MOUNT_SENSOR_ARRAY_II'),
  mountSensorArrayIii._('MOUNT_SENSOR_ARRAY_III'),
  mountMiningLaserI._('MOUNT_MINING_LASER_I'),
  mountMiningLaserIi._('MOUNT_MINING_LASER_II'),
  mountMiningLaserIii._('MOUNT_MINING_LASER_III'),
  mountLaserCannonI._('MOUNT_LASER_CANNON_I'),
  mountMissileLauncherI._('MOUNT_MISSILE_LAUNCHER_I'),
  mountTurretI._('MOUNT_TURRET_I'),
  shipProbe._('SHIP_PROBE'),
  shipMiningDrone._('SHIP_MINING_DRONE'),
  shipSiphonDrone._('SHIP_SIPHON_DRONE'),
  shipInterceptor._('SHIP_INTERCEPTOR'),
  shipLightHauler._('SHIP_LIGHT_HAULER'),
  shipCommandFrigate._('SHIP_COMMAND_FRIGATE'),
  shipExplorer._('SHIP_EXPLORER'),
  shipHeavyFreighter._('SHIP_HEAVY_FREIGHTER'),
  shipLightShuttle._('SHIP_LIGHT_SHUTTLE'),
  shipOreHound._('SHIP_ORE_HOUND'),
  shipRefiningFreighter._('SHIP_REFINING_FREIGHTER'),
  shipSurveyor._('SHIP_SURVEYOR'),
  shipBulkFreighter._('SHIP_BULK_FREIGHTER');

  const TradeSymbol._(this.value);

  factory TradeSymbol.fromJson(String json) {
    return TradeSymbol.values.firstWhere(
      (value) => value.value == json,
      orElse: () => throw FormatException('Unknown TradeSymbol value: $json'),
    );
  }

  /// Convenience to create a nullable type from a nullable json object.
  /// Useful when parsing optional fields.
  static TradeSymbol? maybeFromJson(String? json) {
    if (json == null) {
      return null;
    }
    return TradeSymbol.fromJson(json);
  }

  final String value;

  String toJson() => value;

  @override
  String toString() => value;
}
